const a="https://www.googleapis.com/auth/spreadsheets https://www.googleapis.com/auth/drive.file";class r{static clientId="338305920567-bhd608ebcip1u08qf0gb5f08o4je4dnp.apps.googleusercontent.com";static init(){(!window.google||!window.google.accounts||!window.google.accounts.oauth2)&&console.warn("Google Identity Services ainda não carregado.")}static isAuthenticated(){const e=localStorage.getItem("accessToken"),t=localStorage.getItem("accessTokenExpiresAt"),o=!!e&&!!t&&Date.now()<Number(t);return console.log("isAuthenticated:",o),o}static async authenticate(){await this.ensureValidToken()||await this.interactiveLogin()}static async interactiveLogin(){return new Promise((e,t)=>{window.google.accounts.oauth2.initTokenClient({client_id:this.clientId,scope:a,prompt:"consent",callback:async s=>{if(s.error){t(new Error("Erro ao obter access token"));return}this.storeCredentials(s.access_token,s.expires_in);try{const n=await this.fetchUserInfo(s.access_token);localStorage.setItem("user",JSON.stringify(n)),e()}catch(n){t(n)}}}).requestAccessToken()})}static async ensureValidToken(){return this.isAuthenticated()?!0:new Promise(e=>{window.google.accounts.oauth2.initTokenClient({client_id:this.clientId,scope:a,prompt:"",callback:async o=>{if(o.error||!o.access_token)e(!1);else{if(this.storeCredentials(o.access_token,o.expires_in),!localStorage.getItem("user"))try{const s=await this.fetchUserInfo(o.access_token);localStorage.setItem("user",JSON.stringify(s))}catch(s){console.warn("Falha ao buscar informações do usuário no login silencioso:",s)}e(!0)}}}).requestAccessToken()})}static getAccessToken(){const e=localStorage.getItem("accessToken");if(!e)throw new Error("Token de acesso não encontrado.");return e}static getUser(){const e=localStorage.getItem("user");if(!e)return null;try{const t=JSON.parse(e);return{name:t.name,email:t.email,picture:t.picture}}catch{return null}}static logout(){localStorage.removeItem("accessToken"),localStorage.removeItem("accessTokenExpiresAt"),localStorage.removeItem("user"),window.location.href="/login.html"}static storeCredentials(e,t){localStorage.setItem("accessToken",e);const o=Date.now()+(t||3600)*1e3;localStorage.setItem("accessTokenExpiresAt",o.toString())}static async fetchUserInfo(e){const t=await fetch("https://www.googleapis.com/oauth2/v3/userinfo",{headers:{Authorization:`Bearer ${e}`}});if(!t.ok)throw new Error("Erro ao obter dados do usuário");return t.json()}}export{r as G};
